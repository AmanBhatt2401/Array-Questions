#include <iostream>
#include <algorithm> 
#include <string> 
using namespace std; 

string array_addition_1(int* arr, const size_t array_size) {
  // If the array size is less than 2, return "False"
  if (array_size < 2)
    return "False";

  // Sort the array elements in ascending order
  sort(arr, arr + array_size);

  // Get the maximum number from the array
  const int max_number{ arr[array_size - 1] };

  // Check if the array contains negative numbers
  const bool negative_numbers{ arr[0] < 0 };

  do {
    int latest_sum{}; // Variable to store the running sum of array elements

    // Loop through the array elements to find subsets whose sum equals the maximum number
    for (size_t i{}; i < array_size - 1; i++) {
      latest_sum += arr[i]; // Add the current element to the running sum

      // If the running sum matches the maximum number, return "True"
      if (max_number == latest_sum)
        return "True";

      // If there are no negative numbers and the running sum exceeds the maximum number, break the loop
      if (!negative_numbers && latest_sum > max_number)
        break;
    }

  } while (next_permutation(arr, arr + array_size - 1)); 

  return "False"; 
}

int main() {
  int nums1[] = {3, 5, 22, 10, 1, 3};
  cout << '\n' << array_addition_1(nums1, sizeof(nums1) / sizeof(nums1[0])); 
  int nums2[] = {4, 6, 15, 0, 1};
  cout << '\n' << array_addition_1(nums2, sizeof(nums2) / sizeof(nums2[0])); 
  int nums3[] = {2, 6, -1, 8, 1};
  cout << '\n' << array_addition_1(nums3, sizeof(nums3) / sizeof(nums3[0]));  
  int nums4[] = {2, 2, 4, 6, 7};
  cout << '\n' << array_addition_1(nums4, sizeof(nums4) / sizeof(nums4[0])); 
  int nums5[] = {1, 1, 1, 1, 1, 0, 5};
  cout << '\n' << array_addition_1(nums5, sizeof(nums5) / sizeof(nums5[0])); 
  return 0; 
}
